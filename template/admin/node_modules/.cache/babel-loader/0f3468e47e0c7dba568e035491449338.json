{"remainingRequest":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/babel-loader/lib/index.js!/Volumes/mac/webwork/2023/dati/template/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/mac/webwork/2023/dati/template/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/mac/webwork/2023/dati/template/admin/node_modules/iview-loader/index.js??ref--0-2!/Volumes/mac/webwork/2023/dati/template/admin/src/pages/system/backendRouting/debugging.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/mac/webwork/2023/dati/template/admin/src/pages/system/backendRouting/debugging.vue","mtime":1689324015271},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/babel.config.js","mtime":1689324015052},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/.babelrc","mtime":1689324015050},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["request","MonacoEditor","vuedraggable","getCookies","requestMethod","url","method","params","data","headerItem","components","props","formValidate","type","Object","default","_default","requestTypeList","Array","typeList","apiType","String","bodyType","interfaceData","undefined","paramsType","editor","codes","jsonBody","created","request_body","JSON","parse","stringify","mounted","$refs","zTable","getTableData","tableData","length","insertEvent","attribute","value","methods","handleChange","e","row","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","arr","id","$table","i","wrap","_callee$","_context","prev","next","children","parentId","remove","stop","insertCopy","_this2","$copyText","then","message","$Message","success","catch","err","error","requestData","_this3","_callee2","body","headers","h","_callee2$","_context2","path","t0","xTable","t1","sent","t2","filtersData","call","t3","t4","yTable","t5","t6","t7","t8","t9","console","log","res","_this4","x","map","_loop","obj","item","index","filtersObj","_this5","_loop2","oj","changeTab","name","d","_this6","_callee3","newRow","_yield$$table$insertA","_callee3$","_context3","must","trip","_objectSpread","code","solution","insertAt","setActiveCell","insertRow","currRow","_this7","_callee4","record","_yield$$table$insertA2","_callee4$","_context4","Date","now","setTreeExpand","setActiveRow","removeRow","_this8","_callee5","_callee5$","_context5"],"sources":["src/pages/system/backendRouting/debugging.vue"],"sourcesContent":["<template>\n  <div class=\"content\" v-if=\"interfaceData\">\n    <div class=\"head\">\n      <Input v-model=\"interfaceData.path\">\n        <template #prepend>\n          <Select v-model=\"interfaceData.method\" style=\"width: 120px\">\n            <Option v-for=\"(item, index) in requestTypeList\" :key=\"index\" :value=\"item.value\">{{ item.label }}</Option>\n          </Select>\n        </template>\n      </Input>\n      <Button class=\"ml20\" type=\"primary\" @click=\"requestData\">请求</Button>\n      <Button v-if=\"codes\" class=\"ml10 copy-btn\" type=\"success\" @click=\"insertCopy()\">复制结果</Button>\n    </div>\n    <div class=\"params\">\n      <Tabs class=\"mt10\" v-model=\"paramsType\" @on-click=\"changeTab\">\n        <TabPane label=\"Params\" name=\"Params\"> </TabPane>\n        <TabPane label=\"Body\" name=\"Body\"> </TabPane>\n        <TabPane label=\"Header\" name=\"Header\"> </TabPane>\n      </Tabs>\n      <div v-show=\"paramsType === 'Params'\">\n        <vxe-table\n          class=\"mt10\"\n          resizable\n          show-overflow\n          keep-source\n          ref=\"xTable\"\n          row-id=\"id\"\n          :print-config=\"{}\"\n          :export-config=\"{}\"\n          :tree-config=\"{ transform: true, rowField: 'id', parentField: 'parentId' }\"\n          :data=\"interfaceData.request\"\n        >\n          <vxe-column field=\"attribute\" width=\"150\" title=\"属性\" tree-node :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-input v-model=\"row.attribute\" type=\"text\"></vxe-input>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"value\" title=\"参数值\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-input v-model=\"row.value\" type=\"text\"></vxe-input>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"type\" title=\"类型\" width=\"120\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-select\n                v-model=\"row.type\"\n                transfer\n                @change=\"\n                  (val) => {\n                    handleChange(val, row, 'xTable');\n                  }\n                \"\n              >\n                <vxe-option\n                  v-for=\"item in typeList\"\n                  :key=\"item.value\"\n                  :value=\"item.value\"\n                  :label=\"item.label\"\n                ></vxe-option>\n              </vxe-select>\n            </template>\n          </vxe-column>\n          <!-- <vxe-column field=\"must\" title=\"必填\" width=\"50\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <span>{{ row.must == '1' ? '是' : '否' }}</span>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"trip\" width=\"150\" title=\"说明\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-input v-model=\"row.trip\" type=\"text\"></vxe-input>\n            </template>\n          </vxe-column> -->\n          <vxe-column title=\"操作\" width=\"120\">\n            <template #default=\"{ row }\">\n              <vxe-button\n                type=\"text\"\n                v-if=\"['array', 'object'].includes(row.type)\"\n                status=\"primary\"\n                @click=\"insertRow(row, 'xTable')\"\n                >插入</vxe-button\n              >\n              <vxe-button type=\"text\" status=\"primary\" @click=\"removeRow(row, 'xTable')\">删除</vxe-button>\n            </template>\n          </vxe-column>\n        </vxe-table>\n        <Button class=\"mt10\" type=\"primary\" @click=\"insertEvent('xTable')\">添加参数</Button>\n      </div>\n      <div v-show=\"paramsType === 'Body'\">\n        <RadioGroup v-model=\"bodyType\" class=\"mt10\">\n          <Radio label=\"form-data\"></Radio>\n          <Radio label=\"json\"></Radio>\n        </RadioGroup>\n        <vxe-table\n          v-if=\"bodyType == 'form-data'\"\n          class=\"mt10\"\n          resizable\n          show-overflow\n          keep-source\n          ref=\"yTable\"\n          row-id=\"id\"\n          :print-config=\"{}\"\n          :export-config=\"{}\"\n          :tree-config=\"{ transform: true, rowField: 'id', parentField: 'parentId' }\"\n          :data=\"interfaceData.request_body\"\n        >\n          <vxe-column field=\"attribute\" width=\"150\" title=\"属性\" tree-node :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-input v-model=\"row.attribute\" type=\"text\"></vxe-input>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"value\" title=\"参数值\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-input v-model=\"row.value\" type=\"text\"></vxe-input>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"type\" title=\"类型\" width=\"120\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-select\n                v-model=\"row.type\"\n                transfer\n                @change=\"\n                  (val) => {\n                    handleChange(val, row, 'yTable');\n                  }\n                \"\n              >\n                <vxe-option\n                  v-for=\"item in typeList\"\n                  :key=\"item.value\"\n                  :value=\"item.value\"\n                  :label=\"item.label\"\n                ></vxe-option>\n              </vxe-select>\n            </template>\n          </vxe-column>\n          <!-- <vxe-column field=\"must\" title=\"必填\" width=\"50\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <span>{{ row.must == '1' ? '是' : '否' }}</span>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"trip\" title=\"说明\" width=\"150\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-input v-model=\"row.trip\" type=\"text\"></vxe-input>\n            </template>\n          </vxe-column> -->\n          <vxe-column title=\"操作\" width=\"120\">\n            <template #default=\"{ row }\">\n              <vxe-button\n                type=\"text\"\n                v-if=\"['array', 'object'].includes(row.type)\"\n                status=\"primary\"\n                @click=\"insertRow(row, 'yTable')\"\n                >插入</vxe-button\n              >\n              <vxe-button type=\"text\" status=\"primary\" @click=\"removeRow(row, 'yTable')\">删除</vxe-button>\n            </template>\n          </vxe-column>\n        </vxe-table>\n        <div v-else>\n          <Input v-model=\"jsonBody\" type=\"textarea\" :rows=\"8\" placeholder=\"请求数据\" />\n        </div>\n        <Button v-if=\"bodyType == 'form-data'\" class=\"mt10\" type=\"primary\" @click=\"insertEvent('yTable')\"\n          >添加参数</Button\n        >\n      </div>\n\n      <div v-show=\"paramsType === 'Header'\">\n        <vxe-table\n          class=\"mt10\"\n          resizable\n          show-overflow\n          keep-source\n          ref=\"zTable\"\n          row-id=\"id\"\n          :print-config=\"{}\"\n          :export-config=\"{}\"\n          :tree-config=\"{ transform: true, rowField: 'id', parentField: 'parentId' }\"\n          :data=\"interfaceData.headerData\"\n        >\n          <vxe-column field=\"attribute\" width=\"300\" title=\"属性\" tree-node :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-input v-model=\"row.attribute\" type=\"text\"></vxe-input>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"value\" title=\"参数值\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-input v-model=\"row.value\" type=\"text\"></vxe-input>\n            </template>\n          </vxe-column>\n          <vxe-column title=\"操作\" width=\"100\">\n            <template #default=\"{ row }\">\n              <vxe-button\n                type=\"text\"\n                v-if=\"['array', 'object'].includes(row.type)\"\n                status=\"primary\"\n                @click=\"insertRow(row, 'zTable')\"\n                >插入</vxe-button\n              >\n              <vxe-button type=\"text\" status=\"primary\" @click=\"removeRow(row, 'zTable')\">删除</vxe-button>\n            </template>\n          </vxe-column>\n        </vxe-table>\n        <Button class=\"mt10\" type=\"primary\" @click=\"insertEvent('zTable')\">添加参数</Button>\n        <!-- <h4 class=\"mt10 title\">全局Header参数</h4>\n        <vxe-table\n          class=\"mt10\"\n          resizable\n          show-overflow\n          keep-source\n          ref=\"zaTable\"\n          row-id=\"id\"\n          :print-config=\"{}\"\n          :export-config=\"{}\"\n          :tree-config=\"{ transform: true, rowField: 'id', parentField: 'parentId' }\"\n          :data=\"interfaceData.allHeaderData\"\n        >\n          <vxe-column field=\"attribute\" width=\"300\" title=\"属性\" tree-node :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <span>{{ row.attribute || '' }}</span>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"value\" title=\"参数值\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <span>{{ row.value || '' }}</span>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"type\" title=\"类型\" width=\"200\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <span>{{ row.type || '' }}</span>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"trip\" title=\"说明\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <span>{{ row.trip || '' }}</span>\n            </template>\n          </vxe-column>\n        </vxe-table> -->\n      </div>\n    </div>\n    <div class=\"res mt10 mb10\" v-if=\"codes\">\n      <MonacoEditor :codes=\"codes\" :readOnly=\"true\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport request from './request';\nimport MonacoEditor from './components/MonacoEditor.vue';\nimport vuedraggable from 'vuedraggable';\nimport { getCookies } from '@/libs/util';\n\nfunction requestMethod(url, method, params, data, headerItem) {\n  return request({\n    url,\n    method,\n    params,\n    data,\n    headerItem,\n  });\n}\nexport default {\n  components: { MonacoEditor },\n  props: {\n    formValidate: {\n      type: Object,\n      default: () => {\n        return {};\n      },\n    },\n    requestTypeList: {\n      type: Array,\n      default: () => {\n        return [];\n      },\n    },\n    typeList: {\n      type: Array,\n      default: () => {\n        return [];\n      },\n    },\n    apiType: {\n      type: String,\n      default: 'adminapi',\n    },\n  },\n  data() {\n    return {\n      bodyType: 'form-data',\n      interfaceData: undefined,\n      paramsType: 'Params',\n      editor: '', //当前编辑器对象\n      codes: '',\n      jsonBody: '',\n    };\n  },\n  created() {\n    this.interfaceData = this.formValidate;\n    this.interfaceData.request_body = JSON.parse(JSON.stringify(this.interfaceData.request));\n  },\n  mounted() {\n    if (!this.$refs.zTable.getTableData().tableData.length && this.apiType == 'adminapi') {\n      this.insertEvent('zTable', {\n        attribute: 'Authori-Zation',\n        value: 'Bearer ' + getCookies('token'),\n      });\n      // this.insertEvent('zaTable');\n    }\n  },\n  methods: {\n    async handleChange(e, row, type) {\n      if (e.value !== 'array' && e.value !== 'object') {\n        if (row.children.length) {\n          let arr = this.$refs[type].getTableData().tableData;\n          let id = row.children[0].parentId;\n          const $table = this.$refs[type];\n          for (let i = 0; i < arr.length; i++) {\n            if (arr[i].parentId == id) {\n              await $table.remove(arr[i]);\n            }\n          }\n        }\n      }\n    },\n    insertCopy() {\n      this.$copyText(this.codes)\n        .then((message) => {\n          this.$Message.success('复制成功');\n        })\n        .catch((err) => {\n          this.$Message.error('复制失败');\n        });\n    },\n    async requestData() {\n      let url, method, params, body, headers;\n      url = this.apiType + '/' + this.interfaceData.path;\n      method = this.interfaceData.method;\n      params = this.filtersData((await this.$refs.xTable.getTableData().tableData) || []);\n      body =\n        this.bodyType === 'json'\n          ? this.jsonBody\n          : this.filtersData((await this.$refs.yTable.getTableData().tableData) || []);\n      let h = this.filtersData((await this.$refs.zTable.getTableData().tableData) || []);\n      headers = h;\n      this.codes = '';\n      console.log(url);\n      requestMethod(url, method, params, body, headers)\n        .then((res) => {\n          if (!res) return this.$Message.error('接口异常');\n          this.codes = JSON.stringify(res);\n        })\n        .catch((err) => {\n          if (!err) return this.$Message.error('接口异常');\n          this.codes = JSON.stringify(err);\n        });\n    },\n    filtersData(arr) {\n      try {\n        let x = {};\n        arr.map((e) => {\n          if (!e.parentId) {\n            for (let i in e) {\n              if (i == 'attribute') {\n                if (e.type === 'object') {\n                  let obj = {};\n\n                  e.children.map((item, index) => {\n                    obj = this.filtersObj(item, 1);\n                  });\n                  x[e[i]] = obj;\n                } else if (e.type !== 'array') {\n                  x[e[i]] = e.value || '';\n                } else {\n                  let arr = [];\n                  e.children.map((item, index) => {\n                    arr[index] = this.filtersObj(item);\n                  });\n                  x[e[i]] = arr;\n                }\n              }\n            }\n          }\n        });\n        return x;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    // type 1 为obj属性\n    filtersObj(obj, type) {\n      let x = {};\n      for (let i in obj) {\n        if (i == 'attribute') {\n          if (obj.type === 'object') {\n            let oj = {};\n            obj.children.map((item, index) => {\n              oj[obj.attribute] = this.filtersObj(item);\n            });\n            x = oj;\n          } else if (obj.type !== 'array') {\n            if (type) {\n              x[obj.attribute] = obj.value || '';\n            } else {\n              x[obj[i]] = obj.value || '';\n            }\n          } else {\n            let arr = [];\n            obj.children.map((item, index) => {\n              arr[index] = this.filtersObj(item);\n            });\n            x[obj[i]] = arr;\n          }\n        }\n      }\n      return x;\n    },\n    changeTab(name) {\n      // if (name === 'Header') {\n      //   if (!this.$refs.zTable.getTableData().tableData.length) {\n      //     this.insertEvent('zTable', {\n      //       attribute: 'Authori-Zation',\n      //       value: 'Bearer ' + getCookies('token'),\n      //     });\n      //     this.insertEvent('zaTable');\n      //   }\n      // }\n    },\n    async insertEvent(type, d) {\n      const $table = this.$refs[type];\n      let newRow;\n      if (type == 'xTable') {\n        newRow = {\n          attribute: '',\n          type: 'string',\n          must: 0,\n          value: '',\n          trip: '',\n        };\n      } else if (type == 'yTable') {\n        newRow = {\n          attribute: '',\n          type: 'string',\n          value: '',\n          must: 0,\n          trip: '',\n        };\n      } else if (type == 'zTable') {\n        newRow = {\n          attribute: '',\n          type: '',\n          value: '',\n          trip: '',\n        };\n        newRow = { ...newRow, ...d };\n      } else if (type == 'zaTable') {\n        newRow = {\n          attribute: 'token',\n          type: 'string',\n          value: '',\n          must: 0,\n          trip: '',\n        };\n      } else {\n        newRow = {\n          code: '',\n          value: '',\n          solution: '',\n        };\n      }\n      const { row: data } = await $table.insertAt(newRow, -1);\n      await $table.setActiveCell(data, 'name');\n    },\n    async insertRow(currRow, type) {\n      const $table = this.$refs[type];\n      // 如果 null 则插入到目标节点顶部\n      // 如果 -1 则插入到目标节点底部\n      // 如果 row 则有插入到效的目标节点该行的位置\n      let record;\n      if (type == 'xTable') {\n        record = {\n          attribute: '',\n          type: 'string',\n          must: 0,\n          value: '',\n          trip: '',\n          id: Date.now(),\n          parentId: currRow.id, // 需要指定父节点，自动插入该节点中\n        };\n      } else {\n        record = {\n          code: '',\n          value: '',\n          solution: '',\n          id: Date.now(),\n          parentId: currRow.id, // 需要指定父节点，自动插入该节点中\n        };\n      }\n      const { row: newRow } = await $table.insertAt(record, -1);\n      await $table.setTreeExpand(currRow, true); // 将父节点展开\n      await $table.setActiveRow(newRow); // 插入子节点\n    },\n    async removeRow(row, type) {\n      const $table = this.$refs[type];\n      await $table.remove(row);\n    },\n  },\n};\n</script>\n<style>\n.vxe-select--panel.is--transfer {\n  z-index: 99999 !important;\n}\n</style>\n<style lang=\"scss\" scoped>\n.content {\n  padding: 12px;\n  .head {\n    display: flex;\n    align-items: center;\n    .item {\n      display: flex;\n      align-items: center;\n      margin-bottom: 12px;\n      font-size: 14px;\n      .title {\n        margin-right: 14px;\n      }\n    }\n  }\n}\n.copy-btn {\n  display: flex;\n  justify-content: right;\n}\n/deep/ .monaco-editor {\n  min-height: 700px;\n}\n</style>\n"],"mappings":"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"}]}