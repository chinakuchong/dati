{"remainingRequest":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/mac/webwork/2023/dati/template/admin/node_modules/iview-loader/index.js??ref--0-2!/Volumes/mac/webwork/2023/dati/template/admin/src/pages/system/codeGeneration/components/FoundationFor.vue?vue&type=style&index=0&id=d4c5c06a&lang=stylus&scoped=true&","dependencies":[{"path":"/Volumes/mac/webwork/2023/dati/template/admin/src/pages/system/codeGeneration/components/FoundationFor.vue","mtime":1689324015272},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/@vue/cli-service/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/stylus-loader/index.js","mtime":1519606876000},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmZvcm0td2lkdGggewogIHdpZHRoOiA1MDBweDsKfQouaXRlbXsKICBkaXNwbGF5IGZsZXgKICBtYXJnaW4tYm90dG9tIDEwcHgKICAucm93ewogICAgd2lkdGggMTQwcHgKICAgIG1hcmdpbi1yaWdodCAxMHB4CiAgfQp9Cg=="},{"version":3,"sources":["FoundationFor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"FoundationFor.vue","sourceRoot":"src/pages/system/codeGeneration/components","sourcesContent":["<template>\n  <div class=\"main\">\n    <Alert closable> crud生成说明 不能生成系统自带的表；已经生成过的表还能继续生成 </Alert>\n    <Form ref=\"foundation\" :model=\"foundation\" :rules=\"foundationRules\" :label-width=\"100\">\n      <FormItem label=\"菜单\">\n        <!-- <Select class=\"form-width\" v-model=\"foundation.pid\">\n          <Option value=\"beijing\">New York</Option>\n          <Option value=\"shanghai\">London</Option>\n          <Option value=\"shenzhen\">Sydney</Option>\n        </Select> -->\n        <el-cascader\n          class=\"form-width\"\n          v-model=\"foundation.pid\"\n          size=\"small\"\n          :options=\"menusList\"\n          :props=\"{ checkStrictly: true, multiple: false, emitPath: false }\"\n          clearable\n        ></el-cascader>\n        <div class=\"tip\">选项，选择的菜单成功后会自动写入到此菜单下</div>\n      </FormItem>\n      <FormItem label=\"菜单名称\">\n        <Input class=\"form-width\" v-model=\"foundation.menuName\" placeholder=\"请输入菜单名称\"></Input>\n        <div class=\"tip\">\n          生成菜单为可选项，不填写默认生成的菜单名称将为表名；生成后会把自动生成的权限默认加入该菜单下\n        </div>\n      </FormItem>\n      <FormItem label=\"模块名\" prop=\"modelName\">\n        <Input class=\"form-width\" v-model=\"foundation.modelName\" placeholder=\"请输入模块名\"></Input>\n        <div class=\"tip\">模块名称为中文或者英文，用在接口名称前缀、表单头部标题</div>\n      </FormItem>\n      <FormItem label=\"表名\" prop=\"tableName\">\n        <Input class=\"form-width\" v-model=\"foundation.tableName\" placeholder=\"请输入表名\"></Input>\n        <div class=\"tip\">\n          用于生成CRUD指定的表名，不需要携带表前缀；对于生成过的表将不能在进行生成；或者可以删除对应的文件重新生成！对应系统中重要的数据表将不允许生成！\n        </div>\n      </FormItem>\n      <!-- <FormItem label=\"是否存在\">\n        <RadioGroup v-model=\"foundation.isTable\" @on-change=\"changeRadio\">\n          <Radio :label=\"1\">是</Radio>\n          <Radio :label=\"0\">否</Radio>\n        </RadioGroup>\n        <div class=\"tip\">\n          数据库表可以生成系统存在的，也可以选择【否】后手动生成；如果不满足使用需求可以先在数据库中创建表，然后选择【是】再进行操作\n        </div>\n      </FormItem> -->\n      <!-- <FormItem label=\"字段配置\">\n        <Button type=\"primary\" @click=\"addRow\">{{ foundation.isTable ? '获取字段' : '添加一行' }}</Button>\n        <div>\n          <Table\n            ref=\"selection\"\n            :columns=\"columns\"\n            :data=\"tableField\"\n            no-data-text=\"暂无数据\"\n            highlight-row\n            :loading=\"loading\"\n            max-height=\"600\"\n            size=\"small\"\n            no-filtered-data-text=\"暂无筛选结果\"\n          >\n            <template slot-scope=\"{ row, index }\" slot=\"field\">\n              <span v-if=\"foundation.isTable\">{{ row.field }}</span>\n              <Input v-else :disabled=\"disabledInput(index)\" v-model=\"tableField[index].field\"></Input>\n            </template>\n            <template slot-scope=\"{ row, index }\" slot=\"field_type\">\n              <span v-if=\"foundation.isTable\">{{ row.field_type }}</span>\n              <Select v-else v-model=\"tableField[index].field_type\" @on-change=\"changeItemField($event, index)\">\n                <Option v-for=\"item in columnTypeList\" :value=\"item\" :key=\"item\">{{ item }}</Option>\n              </Select>\n            </template>\n            <template slot-scope=\"{ row, index }\" slot=\"limit\">\n              <span v-if=\"foundation.isTable\">{{ row.limit }}</span>\n              <Input v-else v-model=\"tableField[index].limit\" :disabled=\"disabledInput(index)\"></Input>\n            </template>\n            <template slot-scope=\"{ row, index }\" slot=\"default\">\n              <span v-if=\"foundation.isTable\">{{ row.default }}</span>\n              <Input v-else v-model=\"tableField[index].default\" :disabled=\"disabledInput(index)\"></Input>\n            </template>\n            <template slot-scope=\"{ row, index }\" slot=\"comment\">\n              <span v-if=\"foundation.isTable\">{{ row.comment }}</span>\n              <Input v-else v-model=\"tableField[index].comment\" :disabled=\"disabledInput(index)\"></Input>\n            </template>\n            <template slot-scope=\"{ row, index }\" slot=\"required\">\n              <Checkbox v-model=\"tableField[index].required\" :disabled=\"disabledInput(index)\"></Checkbox>\n            </template>\n            <template slot-scope=\"{ row, index }\" slot=\"is_table\">\n              <Checkbox v-model=\"tableField[index].is_table\" :disabled=\"disabledInput(index)\"></Checkbox>\n            </template>\n            <template slot-scope=\"{ row, index }\" slot=\"table_name\">\n              <Input v-model=\"tableField[index].table_name\" :disabled=\"disabledInput(index)\"></Input>\n            </template>\n            <template slot-scope=\"{ row, index }\" slot=\"from_type\">\n              <Select v-model=\"tableField[index].from_type\" :disabled=\"disabledInput(index)\">\n                <Option v-for=\"item in fromTypeList\" :value=\"item.value\" :key=\"item.value\">{{ item.label }}</Option>\n              </Select>\n            </template>\n            <template slot-scope=\"{ row, index }\" slot=\"action\">\n              <a v-if=\"!foundation.isTable\" @click=\"del(row, index)\">删除</a>\n              <span v-else>--</span>\n            </template>\n          </Table>\n        </div>\n      </FormItem> -->\n    </Form>\n  </div>\n</template>\n\n<script>\nimport { crudMenus, crudColumnType, crudFilePath } from '@/api/systemCodeGeneration';\n\nexport default {\n  name: '',\n  props: {\n    foundation: {\n      type: Object,\n      default: () => {\n        return {};\n      },\n    },\n  },\n  data() {\n    return {\n      foundationRules: {\n        // pid: [{ required: true, message: '请输入菜单', trigger: 'blur' }],\n        tableName: [{ required: true, message: '请输入表名', trigger: 'blur' }],\n        modelName: [{ required: true, message: '请输入模块名', trigger: 'blur' }],\n      },\n      menusList: [],\n      columnTypeList: [],\n      columns: [\n        {\n          title: '字段名称',\n          slot: 'field',\n          minWidth: 100,\n        },\n        {\n          title: '字段类型',\n          slot: 'field_type',\n          minWidth: 100,\n        },\n        {\n          title: '长度',\n          slot: 'limit',\n          minWidth: 100,\n        },\n        {\n          title: '默认值',\n          slot: 'default',\n          minWidth: 100,\n        },\n        {\n          title: '字段描述',\n          slot: 'comment',\n          minWidth: 100,\n        },\n        {\n          title: '列表',\n          slot: 'is_table',\n          width: 70,\n          align: 'center',\n        },\n        {\n          title: '列表名',\n          slot: 'table_name',\n          minWidth: 120,\n          align: 'center',\n        },\n        {\n          title: '表单类型',\n          slot: 'from_type',\n          minWidth: 100,\n        },\n        {\n          title: '必填',\n          slot: 'required',\n          width: 70,\n          align: 'center',\n        },\n        {\n          title: '操作',\n          slot: 'action',\n          width: 70,\n          align: 'center',\n        },\n      ],\n      fromTypeList: [\n        {\n          value: '0',\n          label: '不生成',\n        },\n        {\n          value: 'input',\n          label: 'input',\n        },\n        {\n          value: 'textarea',\n          label: 'textarea',\n        },\n        // {\n        //   value: 'select',\n        //   label: 'select',\n        // },\n        {\n          value: 'radio',\n          label: 'radio',\n        },\n        {\n          value: 'number',\n          label: 'number',\n        },\n        {\n          value: 'frameImageOne',\n          label: 'frameImageOne',\n        },\n        {\n          value: 'frameImages',\n          label: 'frameImages',\n        },\n      ],\n      loading: false,\n      tableField: [],\n    };\n  },\n  created() {\n    this.getCrudMenus();\n  },\n  mounted() {},\n  methods: {\n    disabledInput(index) {\n      let fieldInfo = this.tableField[index];\n      let res = ['addTimestamps', 'addSoftDelete'].includes(this.tableField[index].field_type);\n      if (fieldInfo.primaryKey) {\n        res = true;\n      }\n      if (fieldInfo.field === 'delete_time' && fieldInfo.field_type === 'timestamp') {\n        res = true;\n      }\n      return res;\n    },\n    initfield() {\n      this.tableField = [];\n    },\n    changeItemField(e, i) {\n      if (e === 'addSoftDelete') {\n        this.$set(this.tableField[i], 'comment', '伪删除');\n      }\n      if (e === 'addTimestamps') {\n        this.$set(this.tableField[i], 'comment', '添加和修改时间');\n      }\n    },\n    getCrudMenus() {\n      crudMenus().then((res) => {\n        this.menusList = res.data;\n      });\n      crudColumnType().then((res) => {\n        this.columnTypeList = res.data.types;\n      });\n    },\n    del(index) {\n      this.tableField.splice(index, 1);\n    },\n  },\n};\n</script>\n<style lang=\"stylus\" scoped>\n.form-width {\n  width: 500px;\n}\n.item{\n  display flex\n  margin-bottom 10px\n  .row{\n    width 140px\n    margin-right 10px\n  }\n}\n</style>\n"]}]}