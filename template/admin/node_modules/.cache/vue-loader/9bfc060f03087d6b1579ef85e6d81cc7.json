{"remainingRequest":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/mac/webwork/2023/dati/template/admin/node_modules/iview-loader/index.js??ref--0-2!/Volumes/mac/webwork/2023/dati/template/admin/src/pages/system/crontab/index.vue?vue&type=style&index=0&id=27fac4ae&lang=stylus&scoped=true&","dependencies":[{"path":"/Volumes/mac/webwork/2023/dati/template/admin/src/pages/system/crontab/index.vue","mtime":1689324015274},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/@vue/cli-service/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/stylus-loader/index.js","mtime":1519606876000},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLml2dS1tdCB7CiAgcGFkZGluZy10b3A6MTBweAp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2KA;AACA;AACA","file":"index.vue","sourceRoot":"src/pages/system/crontab","sourcesContent":["<template>\n  <Card :bordered=\"false\" dis-hover>\n    <Alert closable=\"true\">\n      <template slot=\"desc\">\n        启动定时任务两种方式：<br />\n        1、使用命令启动：php think timer start\n        --d；如果更改了执行周期、编辑是否开启、删除定时任务需要重新启动下定时任务确保生效；<br />\n        2、使用接口触发定时任务，建议每分钟调用一次，接口地址 https://您的域名/api/crontab/run\n      </template>\n    </Alert>\n    <Button type=\"primary\" @click=\"addTask\">添加定时任务</Button>\n    <Table :columns=\"columns\" :data=\"tableData\" :loading=\"loading\" class=\"ivu-mt\">\n      <template slot-scope=\"{ row }\" slot=\"execution_cycle\">\n        <span>{{ taskTrip(row) }}</span>\n      </template>\n      <template slot-scope=\"{ row }\" slot=\"is_open\">\n        <i-switch v-model=\"row.is_open\" :true-value=\"1\" :false-value=\"0\" size=\"large\" @on-change=\"handleChange(row)\">\n          <span slot=\"open\">开启</span>\n          <span slot=\"close\">关闭</span>\n        </i-switch>\n      </template>\n      <template slot-scope=\"{ row }\" slot=\"action\">\n        <a @click=\"edit(row.id)\">编辑</a>\n        <Divider type=\"vertical\" />\n        <a @click=\"handleDelete(row, '删除秒杀商品', index)\">删除</a>\n      </template>\n    </Table>\n    <div class=\"acea-row row-right page\">\n      <Page :total=\"total\" :current=\"page\" show-elevator show-total @on-change=\"pageChange\" :page-size=\"limit\" />\n    </div>\n    <creatTask ref=\"addTask\" @submitAsk=\"getList\"></creatTask>\n  </Card>\n</template>\n\n<script>\nimport { timerIndex, showTimer } from '@/api/system';\nimport creatTask from './createModal.vue';\nexport default {\n  name: 'system_crontab',\n  components: { creatTask },\n  data() {\n    return {\n      loading: false,\n      columns: [\n        {\n          title: '名称',\n          key: 'name',\n          minWidth: 150,\n        },\n        {\n          title: '任务说明',\n          key: 'content',\n          minWidth: 120,\n        },\n        // {\n        //   title: '最后执行时间',\n        //   key: 'last_execution_time',\n        //   minWidth: 120,\n        // },\n        // {\n        //   title: '下次执行时间',\n        //   key: 'next_execution_time',\n        //   minWidth: 120,\n        // },\n        {\n          title: '执行周期',\n          slot: 'execution_cycle',\n          minWidth: 160,\n        },\n        {\n          title: '是否开启',\n          slot: 'is_open',\n          minWidth: 100,\n        },\n        {\n          title: '操作',\n          slot: 'action',\n          align: 'center',\n          minWidth: 100,\n        },\n      ],\n      tableData: [],\n      page: 1,\n      limit: 15,\n      total: 1,\n    };\n  },\n  created() {\n    this.getList();\n  },\n  methods: {\n    taskTrip(row) {\n      switch (row.type) {\n        case 1:\n          return `每隔${row.second}秒执行一次`;\n        case 2:\n          return `每隔${row.minute}分钟执行一次`;\n        case 3:\n          return `每隔${row.hour}小时执行一次`;\n        case 4:\n          return `每隔${row.day}天执行一次`;\n        case 5:\n          return `每天${row.hour}时${row.minute}分${row.second}秒执行一次`;\n        case 6:\n          return `每个星期${row.week}的${row.hour}时${row.minute}分${row.second}秒执行一次`;\n        case 7:\n          return `每月${row.day}日的${row.hour}时${row.minute}分${row.second}秒执行一次`;\n      }\n    },\n    // 列表\n    getList() {\n      this.loading = true;\n      timerIndex({\n        page: this.page,\n        limit: this.limit,\n      })\n        .then((res) => {\n          this.loading = false;\n          let { count, list } = res.data;\n          this.total = count;\n          this.tableData = list;\n        })\n        .catch((res) => {\n          this.loading = false;\n          this.$Message.error(res.msg);\n        });\n    },\n    addTask() {\n      this.$refs.addTask.modal = true;\n    },\n    edit(id) {\n      this.$refs.addTask.timerInfo(id);\n    },\n    // 删除\n    handleDelete(row, tit, num) {\n      let delfromData = {\n        title: tit,\n        num: num,\n        url: `system/crontab/del/${row.id}`,\n        method: 'delete',\n        ids: '',\n      };\n      this.$modalSure(delfromData)\n        .then((res) => {\n          this.$Message.success(res.msg);\n          this.getList();\n        })\n        .catch((res) => {\n          this.$Message.error(res.msg);\n        });\n    },\n    // 是否开启\n    handleChange({ id, is_open }) {\n      showTimer(id, is_open)\n        .then((res) => {\n          this.$Message.success(res.msg);\n          this.getList();\n        })\n        .catch((res) => {\n          this.$Message.error(res.msg);\n        });\n    },\n    pageChange(index) {\n      this.page = index;\n      this.getList();\n    },\n  },\n};\n</script>\n\n<style lang=\"stylus\" scoped>\n.ivu-mt {\n  padding-top:10px\n}\n</style>\n"]}]}