{"remainingRequest":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Volumes/mac/webwork/2023/dati/template/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/mac/webwork/2023/dati/template/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/mac/webwork/2023/dati/template/admin/node_modules/iview-loader/index.js??ref--0-2!/Volumes/mac/webwork/2023/dati/template/admin/src/pages/marketing/point_statistic/index.vue?vue&type=template&id=a3def5b2&scoped=true&","dependencies":[{"path":"/Volumes/mac/webwork/2023/dati/template/admin/src/pages/marketing/point_statistic/index.vue","mtime":1689324015225},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Volumes/mac/webwork/2023/dati/template/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}